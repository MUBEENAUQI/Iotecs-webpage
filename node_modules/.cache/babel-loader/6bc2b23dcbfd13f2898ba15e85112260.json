{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\n\n/* App.js */\nvar React = require('react');\n\nvar Component = React.Component;\nimport CanvasJSReact from './canvasjs.react'; //var CanvasJSReact = require('./canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar dps = [{\n  x: 1,\n  y: 10\n}, {\n  x: 2,\n  y: 13\n}, {\n  x: 3,\n  y: 18\n}, {\n  x: 4,\n  y: 20\n}, {\n  x: 5,\n  y: 17\n}, {\n  x: 6,\n  y: 10\n}, {\n  x: 7,\n  y: 13\n}, {\n  x: 8,\n  y: 18\n}, {\n  x: 9,\n  y: 20\n}, {\n  x: 10,\n  y: 17\n}]; //dataPoints.\n\nvar xVal = dps.length + 1;\nvar yVal = 15;\nvar updateInterval = 1000;\n\nclass ECG extends Component {\n  constructor() {\n    super();\n    this.updateChart = this.updateChart.bind(this);\n  }\n\n  componentDidMount() {\n    setInterval(this.updateChart, updateInterval);\n  }\n\n  updateChart() {\n    yVal = yVal + Math.round(5 + Math.random() * (-5 - 5));\n    dps.push({\n      x: xVal,\n      y: yVal\n    });\n    xVal++;\n\n    if (dps.length > 10) {\n      dps.shift();\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const options = {\n      title: {\n        text: \"Dynamic Line Chart\"\n      },\n      data: [{\n        type: \"line\",\n        dataPoints: dps\n      }]\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: options,\n      onRef: ref => this.chart = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }\n\n}\n\nmodule.exports = ECG; //import React, { Component, ScrollContainer, useState } from 'react';\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\n//import Row from \"react-bootstrap/esm/Row\";\n//import firebase from \"firebase/compat/app\";\n//import \"firebase/compat/database\";\n//class ECG extends React.Component {\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            TempList: [],\n//            count: 0,\n//        };\n//    }\n//    componentDidMount() {\n//        firebase.database().ref(\"mlx90614/1-set\").on(\"value\", snapshot => {\n//            console.log(snapshot.val().object);\n//            this.setState({ count: snapshot.val().object });\n//        });\n//        firebase.database().ref(\"mlx90614/2-push\").on(\"value\", snapshot => {\n//            let TempList = [];\n//            snapshot.forEach(snap => {\n//                TempList.push(snap.val());\n//                console.log(snap.val());\n//            });\n//            this.setState({ TempList: TempList });\n//        });\n//    }\n//    render() {\n//        const { TempList } = this.state;\n//        return (\n//                    <ResponsiveContainer width=\"100%\" height=\"100%\" >\n//                             <LineChart width={300} height={80} data={TempList}>\n//                            <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\n//                            <CartesianGrid opacity={1} vertical={false} />\n//                            {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\n//                            <YAxis />\n//                        </LineChart>\n//            </ResponsiveContainer >\n//        );\n//    }\n//}\n//export default ECG;\n//import React, { Component, ScrollContainer, useState } from 'react';\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\n//import Row from \"react-bootstrap/esm/Row\";\n//import { CanvasJSChart } from 'canvasjs-react-charts'\n//const data = [];\n//for (let num = 5; num >= 0; num--) {\n//    data.push({\n//        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n//    });\n//}\n//class ECG extends React.Component {\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            start: 0,\n//            end: 0,\n//            val: [],\n//            count: 0,\n//            news: data,\n//        };\n//    }\n//    componentDidMount = () => {\n//        let flag = 0;\n//        let i = 0;\n//        console.log(this.state.news);\n//        this.myTimer = setInterval(() => {\n//            flag = flag + 1;\n//            if (i === 0) {\n//                this.setState({ news: data });\n//                i=1;\n//            }\n//            if (flag === 5) {\n//                this.setState({news : this.val })\n//                this.setState({ val: [{y:885}] });\n//                flag = 0;\n//            }\n//            this.setState(prevState => ({\n//                val: [...prevState.val, { y: Math.floor(Math.random() * (400 - 180 + 1)) + 180 }],\n//            }));\n//        }, 1000);\n//    };\n//    componentWillMount = () => {\n//        clearInterval(this.myTimer);\n//    }\n//    render() {\n//        const { val } = this.state;\n//        const { news } = this.state;\n//        return (\n//            <div>\n//                {news.map(({ y }) => {\n//                    return <p key={y}> {y} </p>\n//                })}\n//            </div>\n//    //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\n//    //            <LineChart width={300} height={80} data={news}>\n//    //                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\n//    //                <CartesianGrid opacity={1} vertical={false} />\n//    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\n//    //                <YAxis />\n//    //            </LineChart>\n//    //</ResponsiveContainer >\n//        );\n//    }\n//}\n//export default ECG;","map":{"version":3,"sources":["D:/project/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","require","Component","CanvasJSReact","CanvasJS","CanvasJSChart","dps","x","y","xVal","length","yVal","updateInterval","ECG","constructor","updateChart","bind","componentDidMount","setInterval","Math","round","random","push","shift","chart","render","options","title","text","data","type","dataPoints","ref","module","exports"],"mappings":"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","sourcesContent":["/* App.js */\r\nvar React = require('react');\r\nvar Component = React.Component;\r\nimport CanvasJSReact from './canvasjs.react';\r\n//var CanvasJSReact = require('./canvasjs.react');\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nvar dps = [{ x: 1, y: 10 }, { x: 2, y: 13 }, { x: 3, y: 18 }, { x: 4, y: 20 }, { x: 5, y: 17 }, { x: 6, y: 10 }, { x: 7, y: 13 }, { x: 8, y: 18 }, { x: 9, y: 20 }, { x: 10, y: 17 }];   //dataPoints.\r\nvar xVal = dps.length + 1;\r\nvar yVal = 15;\r\nvar updateInterval = 1000;\r\n\r\nclass ECG extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.updateChart = this.updateChart.bind(this);\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tsetInterval(this.updateChart, updateInterval);\r\n\t}\r\n\tupdateChart() {\r\n\t\tyVal = yVal + Math.round(5 + Math.random() * (-5 - 5));\r\n\t\tdps.push({ x: xVal, y: yVal });\r\n\t\txVal++;\r\n\t\tif (dps.length > 10) {\r\n\t\t\tdps.shift();\r\n\t\t}\r\n\t\tthis.chart.render();\r\n\t}\r\n\trender() {\r\n\t\tconst options = {\r\n\t\t\ttitle: {\r\n\t\t\t\ttext: \"Dynamic Line Chart\"\r\n\t\t\t},\r\n\t\t\tdata: [{\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tdataPoints: dps\r\n\t\t\t}]\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<CanvasJSChart options={options}\r\n\t\t\t\t\tonRef={ref => this.chart = ref}\r\n\t\t\t\t/>\r\n\t\t\t\t{/*You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods*/}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nmodule.exports = ECG;\r\n\r\n\r\n//import React, { Component, ScrollContainer, useState } from 'react';\r\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\n//import Row from \"react-bootstrap/esm/Row\";\r\n//import firebase from \"firebase/compat/app\";\r\n//import \"firebase/compat/database\";\r\n\r\n\r\n\r\n\r\n//class ECG extends React.Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n            \r\n//            TempList: [],\r\n//            count: 0,\r\n            \r\n\r\n//        };\r\n//    }\r\n//    componentDidMount() {\r\n\r\n\r\n//        firebase.database().ref(\"mlx90614/1-set\").on(\"value\", snapshot => {\r\n//            console.log(snapshot.val().object);\r\n//            this.setState({ count: snapshot.val().object });\r\n\r\n//        });\r\n//        firebase.database().ref(\"mlx90614/2-push\").on(\"value\", snapshot => {\r\n//            let TempList = [];\r\n//            snapshot.forEach(snap => {\r\n\r\n//                TempList.push(snap.val());\r\n//                console.log(snap.val());\r\n//            });\r\n//            this.setState({ TempList: TempList });\r\n//        });\r\n\r\n//    }\r\n\r\n   \r\n\r\n\r\n//    render() {\r\n//        const { TempList } = this.state;\r\n   \r\n\r\n//        return (\r\n           \r\n//                    <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n\r\n//                             <LineChart width={300} height={80} data={TempList}>\r\n//                            <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n//                            <CartesianGrid opacity={1} vertical={false} />\r\n//                            {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n//                            <YAxis />\r\n//                        </LineChart>\r\n\r\n//            </ResponsiveContainer >\r\n\r\n//        );\r\n//    }\r\n//}\r\n//export default ECG;\r\n\r\n\r\n//import React, { Component, ScrollContainer, useState } from 'react';\r\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\n//import Row from \"react-bootstrap/esm/Row\";\r\n//import { CanvasJSChart } from 'canvasjs-react-charts'\r\n//const data = [];\r\n\r\n//for (let num = 5; num >= 0; num--) {\r\n//    data.push({\r\n//        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n//    });\r\n\r\n//}\r\n\r\n\r\n//class ECG extends React.Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            start: 0,\r\n//            end: 0,\r\n//            val: [],\r\n//            count: 0,\r\n//            news: data,\r\n\r\n//        };\r\n//    }\r\n\r\n//    componentDidMount = () => {\r\n//        let flag = 0;\r\n//        let i = 0;\r\n//        console.log(this.state.news);\r\n//        this.myTimer = setInterval(() => {\r\n//            flag = flag + 1;\r\n\r\n//            if (i === 0) {\r\n//                this.setState({ news: data });\r\n//                i=1;\r\n//            }\r\n\r\n//            if (flag === 5) {\r\n//                this.setState({news : this.val })\r\n//                this.setState({ val: [{y:885}] });\r\n//                flag = 0;\r\n//            }\r\n                \r\n\r\n//            this.setState(prevState => ({\r\n//                val: [...prevState.val, { y: Math.floor(Math.random() * (400 - 180 + 1)) + 180 }],\r\n                \r\n//            }));\r\n            \r\n            \r\n//        }, 1000);\r\n//    };\r\n\r\n\r\n//    componentWillMount = () => {\r\n//        clearInterval(this.myTimer);\r\n//    }\r\n\r\n    \r\n\r\n    \r\n//    render() {\r\n//        const { val } = this.state;\r\n//        const { news } = this.state;\r\n\r\n//        return (\r\n//            <div>\r\n\r\n//                {news.map(({ y }) => {\r\n//                    return <p key={y}> {y} </p>\r\n//                })}\r\n\r\n//            </div>\r\n//    //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n\r\n//    //            <LineChart width={300} height={80} data={news}>\r\n//    //                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n//    //                <CartesianGrid opacity={1} vertical={false} />\r\n//    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n//    //                <YAxis />\r\n//    //            </LineChart>\r\n           \r\n//    //</ResponsiveContainer >\r\n                \r\n//        );\r\n//    }\r\n//}\r\n//export default ECG;"]},"metadata":{},"sourceType":"module"}