{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\nimport React, { Component, ScrollContainer } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\nconst data = [180];\nconst k = 0;\n\nfor (let num = 1000; num >= 0; num--) {\n  data.push({\n    y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n  });\n\n  if (num >= 50) {\n    data.slice(-1);\n  }\n}\n\nclass ECG extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.myTimer = setInterval(() => {\n        this.setState(prevState => ({\n          val: [...this.state.val, Math.floor(Math.random() * (400 - 180 + 1)) + 180]\n        }));\n      }, 1000);\n    };\n\n    this.componentWillMount = () => {\n      clearInterval(this.myTimer);\n    };\n\n    this.state = {\n      start: 0,\n      end: 0,\n      val: []\n    };\n  }\n\n  render() {\n    const {\n      val\n    } = this.state;\n    return React.createElement(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 300,\n      height: 80,\n      data: this.val,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\",\n      strokeWidth: 3,\n      dot: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(CartesianGrid, {\n      opacity: 1,\n      vertical: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ECG;","map":{"version":3,"sources":["D:/project/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","Component","ScrollContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Brush","data","k","num","push","y","Math","floor","random","slice","ECG","constructor","props","componentDidMount","myTimer","setInterval","setState","prevState","val","state","componentWillMount","clearInterval","start","end","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,eAA3B,QAAkD,OAAlD;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,mBAAxE,EAA6FC,KAA7F,QAA0G,UAA1G;AAEA,MAAMC,IAAI,GAAG,CAAC,GAAD,CAAb;AACA,MAAMC,CAAC,GAAG,CAAV;;AAGA,KAAK,IAAIC,GAAG,GAAG,IAAf,EAAqBA,GAAG,IAAI,CAA5B,EAA+BA,GAAG,EAAlC,EAAsC;AAClCF,EAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C;AAD3C,GAAV;;AAKA,MAAIL,GAAG,IAAI,EAAX,EAAe;AACXF,IAAAA,IAAI,CAACQ,KAAL,CAAW,CAAC,CAAZ;AACH;AAEJ;;AAGD,MAAMC,GAAN,SAAkBrB,KAAK,CAACC,SAAxB,CAAkC;AAC9BqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,iBATmB,GASC,MAAM;AACtB,WAAKC,OAAL,GAAeC,WAAW,CAAC,MAAM;AAC7B,aAAKC,QAAL,CAAeC,SAAD,KAAgB;AAC1BC,UAAAA,GAAG,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,GAAf,EAAoBZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C,GAAlE;AADqB,SAAhB,CAAd;AAIH,OALyB,EAKvB,IALuB,CAA1B;AAMH,KAhBkB;;AAAA,SAkBnBY,kBAlBmB,GAkBE,MAAM;AACvBC,MAAAA,aAAa,CAAC,KAAKP,OAAN,CAAb;AACH,KApBkB;;AAEf,SAAKK,KAAL,GAAa;AACTG,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,GAAG,EAAE,CAFI;AAGTL,MAAAA,GAAG,EAAE;AAHI,KAAb;AAKH;;AAkBDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEN,MAAAA;AAAF,QAAU,KAAKC,KAArB;AAEA,WAEI,oBAAC,mBAAD;AAAqB,MAAA,KAAK,EAAC,MAA3B;AAAkC,MAAA,MAAM,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE,GAAlB;AAAuB,MAAA,MAAM,EAAE,EAA/B;AAAmC,MAAA,IAAI,EAAE,KAAKD,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,GAA9B;AAAkC,MAAA,MAAM,EAAC,SAAzC;AAAmD,MAAA,WAAW,EAAE,CAAhE;AAAmE,MAAA,GAAG,EAAE,KAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE,CAAxB;AAA2B,MAAA,QAAQ,EAAE,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAFJ,CAFJ;AAcH;;AA3C6B;;AA6ClC,eAAeR,GAAf","sourcesContent":["\r\nimport React, { Component, ScrollContainer } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\n\r\nconst data = [180];\r\nconst k = 0;\r\n\r\n\r\nfor (let num = 1000; num >= 0; num--) {\r\n    data.push({\r\n        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n\r\n    });\r\n    if (num >= 50) {\r\n        data.slice(-1);\r\n    }\r\n   \r\n}\r\n\r\n\r\nclass ECG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: 0,\r\n            end: 0,\r\n            val: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.myTimer = setInterval(() => {\r\n            this.setState((prevState) => ({\r\n                val: [...this.state.val, Math.floor(Math.random() * (400 - 180 + 1)) + 180]\r\n               \r\n            }));\r\n        }, 1000);\r\n    };\r\n    \r\n    componentWillMount = () => {\r\n        clearInterval(this.myTimer);\r\n    }\r\n\r\n    \r\n\r\n    \r\n    render() {\r\n        const { val } = this.state;\r\n\r\n        return (\r\n            \r\n            <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n           \r\n                <LineChart width={300} height={80} data={this.val}>\r\n                    <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n                    <CartesianGrid opacity={1} vertical={false} />\r\n                    {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n                    <YAxis />\r\n                </LineChart>\r\n           \r\n    </ResponsiveContainer >\r\n                \r\n        );\r\n    }\r\n}\r\nexport default ECG;"]},"metadata":{},"sourceType":"module"}