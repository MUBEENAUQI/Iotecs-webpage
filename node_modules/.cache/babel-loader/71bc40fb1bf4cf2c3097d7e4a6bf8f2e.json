{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\nimport React, { Component, ScrollContainer, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\nimport Row from \"react-bootstrap/esm/Row\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/database\";\n\nclass ECG extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      TempList: [],\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    firebase.database().ref(\"mlx90614/1-set\").on(\"value\", snapshot => {\n      console.log(snapshot.val().object);\n      this.setState({\n        count: snapshot.val().object\n      });\n    });\n    firebase.database().ref(\"mlx90614/2-push\").on(\"value\", snapshot => {\n      let TempList = [];\n      snapshot.forEach(snap => {\n        TempList.push(snap.val());\n        console.log(snap.val());\n      });\n      this.setState({\n        TempList: TempList\n      });\n    });\n  }\n\n  render() {\n    const {\n      TempList\n    } = this.state;\n    return React.createElement(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 300,\n      height: 80,\n      data: TempList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\",\n      strokeWidth: 3,\n      dot: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(CartesianGrid, {\n      opacity: 1,\n      vertical: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ECG; //import React, { Component, ScrollContainer, useState } from 'react';\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\n//import Row from \"react-bootstrap/esm/Row\";\n//const data = [];\n//for (let num = 6; num >= 0; num--) {\n//    data.push({\n//        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n//    });\n//}\n//class ECG extends React.Component {\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            start: 0,\n//            end: 0,\n//            val: [],\n//            count: 0,\n//            news: data,\n//        };\n//    }\n//    componentDidMount = () => {\n//        let flag = 0;\n//        let i = 0;\n//        this.myTimer = setInterval(() => {\n//            flag = flag + 1;\n//            if (i === 0) {\n//                this.setState({ news: data });\n//                i=1;\n//            }\n//            if (flag === 5) {\n//                this.setState({news : this.val })\n//                this.setState({ val: [] });\n//                flag = 0;\n//            }\n//            this.setState  ({\n//                val: [...this.state.val, {y: Math.floor(Math.random() * (400 - 180 + 1)) + 180 }],\n//            });\n//        }, 1000);\n//    };\n//    componentWillMount = () => {\n//        clearInterval(this.myTimer);\n//    }\n//    render() {\n//        const { val } = this.state;\n//        const { news } = this.state;\n//        return (\n//            <div>\n//                {news.map(({ y }) => {\n//                    return <p key={y}> {y} </p>\n//                })}\n//            </div>\n//    //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\n//    //            <LineChart width={300} height={80} data={news}>\n//    //                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\n//    //                <CartesianGrid opacity={1} vertical={false} />\n//    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\n//    //                <YAxis />\n//    //            </LineChart>\n//    //</ResponsiveContainer >\n//        );\n//    }\n//}\n//export default ECG;","map":{"version":3,"sources":["D:/project/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","Component","ScrollContainer","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Brush","Row","firebase","ECG","constructor","props","state","TempList","count","componentDidMount","database","ref","on","snapshot","console","log","val","object","setState","forEach","snap","push","render"],"mappings":"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","sourcesContent":["\r\nimport React, { Component, ScrollContainer, useState } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\nimport Row from \"react-bootstrap/esm/Row\";\r\nimport firebase from \"firebase/compat/app\";\r\nimport \"firebase/compat/database\";\r\n\r\n\r\n\r\n\r\nclass ECG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            TempList: [],\r\n            count: 0,\r\n            \r\n\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n\r\n        firebase.database().ref(\"mlx90614/1-set\").on(\"value\", snapshot => {\r\n            console.log(snapshot.val().object);\r\n            this.setState({ count: snapshot.val().object });\r\n\r\n        });\r\n        firebase.database().ref(\"mlx90614/2-push\").on(\"value\", snapshot => {\r\n            let TempList = [];\r\n            snapshot.forEach(snap => {\r\n\r\n                TempList.push(snap.val());\r\n                console.log(snap.val());\r\n            });\r\n            this.setState({ TempList: TempList });\r\n        });\r\n\r\n    }\r\n\r\n   \r\n\r\n\r\n    render() {\r\n        const { TempList } = this.state;\r\n   \r\n\r\n        return (\r\n           \r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n\r\n                             <LineChart width={300} height={80} data={TempList}>\r\n                            <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n                            <CartesianGrid opacity={1} vertical={false} />\r\n                            {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n                            <YAxis />\r\n                        </LineChart>\r\n\r\n            </ResponsiveContainer >\r\n\r\n        );\r\n    }\r\n}\r\nexport default ECG;\r\n\r\n\r\n//import React, { Component, ScrollContainer, useState } from 'react';\r\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\n//import Row from \"react-bootstrap/esm/Row\";\r\n//const data = [];\r\n\r\n//for (let num = 6; num >= 0; num--) {\r\n//    data.push({\r\n//        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n//    });\r\n\r\n//}\r\n\r\n\r\n//class ECG extends React.Component {\r\n//    constructor(props) {\r\n//        super(props);\r\n//        this.state = {\r\n//            start: 0,\r\n//            end: 0,\r\n//            val: [],\r\n//            count: 0,\r\n//            news: data,\r\n\r\n//        };\r\n//    }\r\n\r\n//    componentDidMount = () => {\r\n//        let flag = 0;\r\n//        let i = 0;\r\n\r\n//        this.myTimer = setInterval(() => {\r\n//            flag = flag + 1;\r\n\r\n//            if (i === 0) {\r\n//                this.setState({ news: data });\r\n//                i=1;\r\n//            }\r\n\r\n//            if (flag === 5) {\r\n//                this.setState({news : this.val })\r\n//                this.setState({ val: [] });\r\n//                flag = 0;\r\n//            }\r\n                \r\n\r\n//            this.setState  ({\r\n//                val: [...this.state.val, {y: Math.floor(Math.random() * (400 - 180 + 1)) + 180 }],\r\n                \r\n//            });\r\n            \r\n//        }, 1000);\r\n//    };\r\n\r\n\r\n//    componentWillMount = () => {\r\n//        clearInterval(this.myTimer);\r\n//    }\r\n\r\n    \r\n\r\n    \r\n//    render() {\r\n//        const { val } = this.state;\r\n//        const { news } = this.state;\r\n\r\n//        return (\r\n//            <div>\r\n\r\n//                {news.map(({ y }) => {\r\n//                    return <p key={y}> {y} </p>\r\n//                })}\r\n\r\n//            </div>\r\n//    //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n\r\n//    //            <LineChart width={300} height={80} data={news}>\r\n//    //                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n//    //                <CartesianGrid opacity={1} vertical={false} />\r\n//    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n//    //                <YAxis />\r\n//    //            </LineChart>\r\n           \r\n//    //</ResponsiveContainer >\r\n                \r\n//        );\r\n//    }\r\n//}\r\n//export default ECG;"]},"metadata":{},"sourceType":"module"}