{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mubee\\\\Desktop\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\nimport React, { Component } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nconst data = [180];\nconst k = 0;\n\nfor (let num = 1000; num >= 0; num--) {\n  data.push({\n    y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n  });\n\n  if (num = 50) {\n    data.slice();\n  }\n}\n\nclass ECG extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      TempList: data\n    };\n  }\n\n  render() {\n    return React.createElement(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 300,\n      height: 80,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\",\n      strokeWidth: 3,\n      dot: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(CartesianGrid, {\n      opacity: 1,\n      vertical: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ECG;","map":{"version":3,"sources":["C:/Users/Mubee/Desktop/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","Component","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","data","k","num","push","y","Math","floor","random","slice","ECG","constructor","props","state","TempList","render"],"mappings":";AACA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,mBAAxE,QAAmG,UAAnG;AAEA,MAAMC,IAAI,GAAG,CAAC,GAAD,CAAb;AACA,MAAMC,CAAC,GAAG,CAAV;;AAGA,KAAK,IAAIC,GAAG,GAAG,IAAf,EAAqBA,GAAG,IAAI,CAA5B,EAA+BA,GAAG,EAAlC,EAAsC;AAClCF,EAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C;AAD3C,GAAV;;AAKA,MAAIL,GAAG,GAAG,EAAV,EAAc;AACVF,IAAAA,IAAI,CAACQ,KAAL;AACH;AAEJ;;AAGD,MAAMC,GAAN,SAAkBnB,KAAK,CAACC,SAAxB,CAAkC;AAC9BmB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAEb;AADD,KAAb;AAGH;;AAMDc,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,mBAAD;AAAqB,MAAA,KAAK,EAAC,MAA3B;AAAkC,MAAA,MAAM,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE,GAAlB;AAAuB,MAAA,MAAM,EAAE,EAA/B;AAAmC,MAAA,IAAI,EAAEd,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,GAA9B;AAAkC,MAAA,MAAM,EAAC,SAAzC;AAAmD,MAAA,WAAW,EAAE,CAAhE;AAAmE,MAAA,GAAG,EAAE,KAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAE,CAAxB;AAA2B,MAAA,QAAQ,EAAE,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,CADJ;AAUH;;AAvB6B;;AAyBlC,eAAeS,GAAf","sourcesContent":["\r\nimport React, {Component } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst data = [180];\r\nconst k = 0;\r\n\r\n\r\nfor (let num = 1000; num >= 0; num--) {\r\n    data.push({\r\n        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n\r\n    });\r\n    if (num = 50) {\r\n        data.slice();\r\n    }\r\n   \r\n}\r\n\r\n\r\nclass ECG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            TempList: data\r\n        };\r\n    }\r\n\r\n    \r\n    \r\n\r\n    \r\n    render() {\r\n        return (\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart width={300} height={80} data={data}>\r\n                    <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n                    <CartesianGrid opacity={1} vertical={false} />\r\n\r\n                    <YAxis />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        );\r\n    }\r\n}\r\nexport default ECG;"]},"metadata":{},"sourceType":"module"}