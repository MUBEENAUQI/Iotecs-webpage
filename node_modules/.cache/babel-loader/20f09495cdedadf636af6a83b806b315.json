{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\nimport React, { Component, ScrollContainer } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\nimport Row from \"react-bootstrap/esm/Row\";\nconst data = [180];\nconst k = 0;\n\nfor (let num = 1000; num >= 0; num--) {\n  data.push({\n    y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n  });\n\n  if (num >= 50) {\n    data.slice(-1);\n  }\n}\n\nclass ECG extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      let flag = 0;\n      this.myTimer = setInterval(() => {\n        flag = flag + 1;\n\n        if (flag === 50) {\n          this.setState({\n            val: []\n          });\n          flag = 0;\n        }\n\n        this.setState({\n          val: [...this.state.val, Math.floor(Math.random() * (400 - 180 + 1)) + 180]\n        });\n      }, 1000);\n    };\n\n    this.componentWillMount = () => {\n      clearInterval(this.myTimer);\n    };\n\n    this.state = {\n      start: 0,\n      end: 0,\n      val: [],\n      count: 0\n    };\n  }\n\n  render() {\n    const {\n      val\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.val))) //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\n    //            <LineChart width={300} height={80} data={this.val}>\n    //                <Line type=\"monotone\" dataKey={this.val} stroke=\"#8884d8\" strokeWidth={3} dot={false} />\n    //                <CartesianGrid opacity={1} vertical={false} />\n    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\n    //                <YAxis />\n    //            </LineChart>\n    //</ResponsiveContainer >\n    ;\n  }\n\n}\n\nexport default ECG;","map":{"version":3,"sources":["D:/project/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","Component","ScrollContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Brush","Row","data","k","num","push","y","Math","floor","random","slice","ECG","constructor","props","componentDidMount","flag","myTimer","setInterval","setState","val","state","componentWillMount","clearInterval","start","end","count","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,eAA3B,QAAkD,OAAlD;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,mBAAxE,EAA6FC,KAA7F,QAA0G,UAA1G;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,MAAMC,IAAI,GAAG,CAAC,GAAD,CAAb;AACA,MAAMC,CAAC,GAAG,CAAV;;AAGA,KAAK,IAAIC,GAAG,GAAG,IAAf,EAAqBA,GAAG,IAAI,CAA5B,EAA+BA,GAAG,EAAlC,EAAsC;AAClCF,EAAAA,IAAI,CAACG,IAAL,CAAU;AACNC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C;AAD3C,GAAV;;AAKA,MAAIL,GAAG,IAAI,EAAX,EAAe;AACXF,IAAAA,IAAI,CAACQ,KAAL,CAAW,CAAC,CAAZ;AACH;AAEJ;;AAGD,MAAMC,GAAN,SAAkBtB,KAAK,CAACC,SAAxB,CAAkC;AAC9BsB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUC,MAAM;AACtB,UAAIC,IAAI,GAAG,CAAX;AACA,WAAKC,OAAL,GAAeC,WAAW,CAAC,MAAM;AAC7BF,QAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;;AAEA,YAAIA,IAAI,KAAK,EAAb,EAAiB;AACb,eAAKG,QAAL,CAAc;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAAd;AACAJ,UAAAA,IAAI,GAAG,CAAP;AACH;;AAGD,aAAKG,QAAL,CAAgB;AACZC,UAAAA,GAAG,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,GAAf,EAAoBZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C,GAAlE;AADO,SAAhB;AAKH,OAdyB,EAcvB,IAduB,CAA1B;AAeH,KA3BkB;;AAAA,SA6BnBY,kBA7BmB,GA6BE,MAAM;AACvBC,MAAAA,aAAa,CAAC,KAAKN,OAAN,CAAb;AACH,KA/BkB;;AAEf,SAAKI,KAAL,GAAa;AACTG,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,GAAG,EAAE,CAFI;AAGTL,MAAAA,GAAG,EAAE,EAHI;AAITM,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMH;;AA4BDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEP,MAAAA;AAAF,QAAU,KAAKC,KAArB;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKD,GAAT,CAAL,CADJ,CADJ,CAKJ;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAdI;AAiBH;;AAzD6B;;AA2DlC,eAAeR,GAAf","sourcesContent":["\r\nimport React, { Component, ScrollContainer } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\nimport Row from \"react-bootstrap/esm/Row\";\r\nconst data = [180];\r\nconst k = 0;\r\n\r\n\r\nfor (let num = 1000; num >= 0; num--) {\r\n    data.push({\r\n        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n\r\n    });\r\n    if (num >= 50) {\r\n        data.slice(-1);\r\n    }\r\n   \r\n}\r\n\r\n\r\nclass ECG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: 0,\r\n            end: 0,\r\n            val: [],\r\n            count: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let flag = 0;\r\n        this.myTimer = setInterval(() => {\r\n            flag = flag + 1;\r\n\r\n            if (flag === 50) {\r\n                this.setState({ val: [] });\r\n                flag = 0;\r\n            }\r\n                \r\n\r\n            this.setState  ({\r\n                val: [...this.state.val, Math.floor(Math.random() * (400 - 180 + 1)) + 180],\r\n                \r\n            });\r\n            \r\n        }, 1000);\r\n    };\r\n    \r\n    componentWillMount = () => {\r\n        clearInterval(this.myTimer);\r\n    }\r\n\r\n    \r\n\r\n    \r\n    render() {\r\n        const { val } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Row><p>{this.val}</p></Row>\r\n                    \r\n            </div>\r\n    //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n           \r\n    //            <LineChart width={300} height={80} data={this.val}>\r\n    //                <Line type=\"monotone\" dataKey={this.val} stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n    //                <CartesianGrid opacity={1} vertical={false} />\r\n    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n    //                <YAxis />\r\n    //            </LineChart>\r\n           \r\n    //</ResponsiveContainer >\r\n                \r\n        );\r\n    }\r\n}\r\nexport default ECG;"]},"metadata":{},"sourceType":"module"}