{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\nimport React, { Component, ScrollContainer } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\nconst k = 0;\n\nclass ECG extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.myTimer = setInterval(() => {\n        let data = [18, 19];\n\n        for (let num = 1000; num >= 0; num--) {\n          data.push({\n            y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n          });\n\n          if (num >= 50) {\n            data.slice(-1);\n          }\n        }\n\n        ;\n        this.setState(prevState => ({\n          val: this.data\n        }));\n      }, 1000);\n    };\n\n    this.componentWillMount = () => {\n      clearInterval(this.myTimer);\n    };\n\n    this.state = {\n      start: 0,\n      end: 0,\n      val: []\n    };\n  }\n\n  render() {\n    const {\n      val\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, val)) //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\n    //            <LineChart width={300} height={80} data={this.val}>\n    //                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\n    //                <CartesianGrid opacity={1} vertical={false} />\n    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\n    //                <YAxis />\n    //            </LineChart>\n    //</ResponsiveContainer >\n    ;\n  }\n\n}\n\nexport default ECG;","map":{"version":3,"sources":["D:/project/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","Component","ScrollContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Brush","k","ECG","constructor","props","componentDidMount","myTimer","setInterval","data","num","push","y","Math","floor","random","slice","setState","prevState","val","componentWillMount","clearInterval","state","start","end","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,eAA3B,QAAkD,OAAlD;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,mBAAxE,EAA6FC,KAA7F,QAA0G,UAA1G;AAGA,MAAMC,CAAC,GAAG,CAAV;;AAGA,MAAMC,GAAN,SAAkBb,KAAK,CAACC,SAAxB,CAAkC;AAC9Ba,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,iBATmB,GASC,MAAM;AACtB,WAAKC,OAAL,GAAeC,WAAW,CAAC,MAAM;AAC7B,YAAIC,IAAI,GAAG,CAAC,EAAD,EAAI,EAAJ,CAAX;;AACA,aAAK,IAAIC,GAAG,GAAG,IAAf,EAAqBA,GAAG,IAAI,CAA5B,EAA+BA,GAAG,EAAlC,EAAsC;AAClCD,UAAAA,IAAI,CAACE,IAAL,CAAU;AACNC,YAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C;AAD3C,WAAV;;AAKA,cAAIL,GAAG,IAAI,EAAX,EAAe;AACXD,YAAAA,IAAI,CAACO,KAAL,CAAW,CAAC,CAAZ;AACH;AAEJ;;AAAA;AAED,aAAKC,QAAL,CAAeC,SAAD,KAAgB;AAC1BC,UAAAA,GAAG,EAAE,KAAKV;AADgB,SAAhB,CAAd;AAGH,OAjByB,EAiBvB,IAjBuB,CAA1B;AAkBH,KA5BkB;;AAAA,SA8BnBW,kBA9BmB,GA8BE,MAAM;AACvBC,MAAAA,aAAa,CAAC,KAAKd,OAAN,CAAb;AACH,KAhCkB;;AAEf,SAAKe,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,GAAG,EAAE,CAFI;AAGTL,MAAAA,GAAG,EAAE;AAHI,KAAb;AAKH;;AA8BDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEN,MAAAA;AAAF,QAAU,KAAKG,KAArB;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIH,GAAJ,CADH,CADJ,CAIJ;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAbI;AAgBH;;AAzD6B;;AA2DlC,eAAehB,GAAf","sourcesContent":["\r\nimport React, { Component, ScrollContainer } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\n\r\n\r\nconst k = 0;\r\n\r\n\r\nclass ECG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: 0,\r\n            end: 0,\r\n            val: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.myTimer = setInterval(() => {\r\n            let data = [18,19];\r\n            for (let num = 1000; num >= 0; num--) {\r\n                data.push({\r\n                    y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n\r\n                });\r\n                if (num >= 50) {\r\n                    data.slice(-1);\r\n                }\r\n\r\n            };\r\n\r\n            this.setState((prevState) => ({\r\n                val: this.data\r\n            }));\r\n        }, 1000);\r\n    };\r\n    \r\n    componentWillMount = () => {\r\n        clearInterval(this.myTimer);\r\n    }\r\n\r\n    \r\n\r\n    \r\n    render() {\r\n        const { val } = this.state;\r\n\r\n        return (\r\n            <div>\r\n               <p>{val}</p>\r\n            </div>\r\n    //        <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n           \r\n    //            <LineChart width={300} height={80} data={this.val}>\r\n    //                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n    //                <CartesianGrid opacity={1} vertical={false} />\r\n    //                {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n    //                <YAxis />\r\n    //            </LineChart>\r\n           \r\n    //</ResponsiveContainer >\r\n                \r\n        );\r\n    }\r\n}\r\nexport default ECG;"]},"metadata":{},"sourceType":"module"}