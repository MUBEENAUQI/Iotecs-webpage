{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\IoTECS-for-Medical-Transportation\\\\src\\\\components\\\\Bodypara\\\\ECG.js\";\nimport React, { Component, ScrollContainer } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\nimport Row from \"react-bootstrap/esm/Row\";\nconst data = [];\n\nfor (let num = 100; num >= 0; num--) {\n  data.push({\n    y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\n  });\n}\n\nclass ECG extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      let flag = 0;\n      this.myTimer = setInterval(() => {\n        flag = flag + 1;\n\n        if (flag === 50) {\n          this.setState({\n            val: []\n          });\n          flag = 0;\n        }\n\n        this.setState({\n          val: [...this.state.val, Math.floor(Math.random() * (400 - 180 + 1)) + 180]\n        });\n      }, 1000);\n    };\n\n    this.componentWillMount = () => {\n      clearInterval(this.myTimer);\n    };\n\n    this.state = {\n      start: 0,\n      end: 0,\n      val: [],\n      count: 0\n    };\n  }\n\n  render() {\n    const {\n      val\n    } = this.state;\n    return (//<div>\n      //    <Row><p>{val}</p></Row>\n      //</div>\n      React.createElement(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(LineChart, {\n        width: 300,\n        height: 80,\n        data: this.val,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Line, {\n        type: \"monotone\",\n        dataKey: val,\n        stroke: \"#8884d8\",\n        strokeWidth: 3,\n        dot: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(CartesianGrid, {\n        opacity: 1,\n        vertical: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })))\n    );\n  }\n\n}\n\nexport default ECG;","map":{"version":3,"sources":["D:/project/IoTECS-for-Medical-Transportation/src/components/Bodypara/ECG.js"],"names":["React","Component","ScrollContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Brush","Row","data","num","push","y","Math","floor","random","ECG","constructor","props","componentDidMount","flag","myTimer","setInterval","setState","val","state","componentWillMount","clearInterval","start","end","count","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,eAA3B,QAAkD,OAAlD;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwEC,mBAAxE,EAA6FC,KAA7F,QAA0G,UAA1G;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,MAAMC,IAAI,GAAG,EAAb;;AAEA,KAAK,IAAIC,GAAG,GAAG,GAAf,EAAoBA,GAAG,IAAI,CAA3B,EAA8BA,GAAG,EAAjC,EAAqC;AACjCD,EAAAA,IAAI,CAACE,IAAL,CAAU;AACNC,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C;AAD3C,GAAV;AAKH;;AAGD,MAAMC,GAAN,SAAkBpB,KAAK,CAACC,SAAxB,CAAkC;AAC9BoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUC,MAAM;AACtB,UAAIC,IAAI,GAAG,CAAX;AACA,WAAKC,OAAL,GAAeC,WAAW,CAAC,MAAM;AAC7BF,QAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;;AAEA,YAAIA,IAAI,KAAK,EAAb,EAAiB;AACb,eAAKG,QAAL,CAAc;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAAd;AACAJ,UAAAA,IAAI,GAAG,CAAP;AACH;;AAGD,aAAKG,QAAL,CAAgB;AACZC,UAAAA,GAAG,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,GAAf,EAAoBX,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,GAAN,GAAY,CAA7B,CAAX,IAA8C,GAAlE;AADO,SAAhB;AAKH,OAdyB,EAcvB,IAduB,CAA1B;AAeH,KA3BkB;;AAAA,SA6BnBW,kBA7BmB,GA6BE,MAAM;AACvBC,MAAAA,aAAa,CAAC,KAAKN,OAAN,CAAb;AACH,KA/BkB;;AAEf,SAAKI,KAAL,GAAa;AACTG,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,GAAG,EAAE,CAFI;AAGTL,MAAAA,GAAG,EAAE,EAHI;AAITM,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMH;;AA4BDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEP,MAAAA;AAAF,QAAU,KAAKC,KAArB;AAEA,WACI;AACA;AAEA;AACA,0BAAC,mBAAD;AAAqB,QAAA,KAAK,EAAC,MAA3B;AAAkC,QAAA,MAAM,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE,GAAlB;AAAuB,QAAA,MAAM,EAAE,EAA/B;AAAmC,QAAA,IAAI,EAAE,KAAKD,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAEA,GAA/B;AAAoC,QAAA,MAAM,EAAC,SAA3C;AAAqD,QAAA,WAAW,EAAE,CAAlE;AAAqE,QAAA,GAAG,EAAE,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAE,CAAxB;AAA2B,QAAA,QAAQ,EAAE,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAII,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAFJ;AALJ;AAiBH;;AAzD6B;;AA2DlC,eAAeR,GAAf","sourcesContent":["\r\nimport React, { Component, ScrollContainer } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\r\nimport Row from \"react-bootstrap/esm/Row\";\r\nconst data = [];\r\n\r\nfor (let num = 100; num >= 0; num--) {\r\n    data.push({\r\n        y: Math.floor(Math.random() * (400 - 180 + 1)) + 180\r\n\r\n    });\r\n\r\n}\r\n\r\n\r\nclass ECG extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: 0,\r\n            end: 0,\r\n            val: [],\r\n            count: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let flag = 0;\r\n        this.myTimer = setInterval(() => {\r\n            flag = flag + 1;\r\n\r\n            if (flag === 50) {\r\n                this.setState({ val: [] });\r\n                flag = 0;\r\n            }\r\n                \r\n\r\n            this.setState  ({\r\n                val: [...this.state.val, Math.floor(Math.random() * (400 - 180 + 1)) + 180],\r\n                \r\n            });\r\n            \r\n        }, 1000);\r\n    };\r\n    \r\n    componentWillMount = () => {\r\n        clearInterval(this.myTimer);\r\n    }\r\n\r\n    \r\n\r\n    \r\n    render() {\r\n        const { val } = this.state;\r\n\r\n        return (\r\n            //<div>\r\n            //    <Row><p>{val}</p></Row>\r\n                    \r\n            //</div>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\" >\r\n           \r\n                <LineChart width={300} height={80} data={this.val}>\r\n                    <Line type=\"monotone\" dataKey={val} stroke=\"#8884d8\" strokeWidth={3} dot={false} />\r\n                    <CartesianGrid opacity={1} vertical={false} />\r\n                    {/*<Brush startIndex={this.state.start} endIndex={this.state.end} />*/}\r\n                    <YAxis />\r\n                </LineChart>\r\n           \r\n    </ResponsiveContainer >\r\n                \r\n        );\r\n    }\r\n}\r\nexport default ECG;"]},"metadata":{},"sourceType":"module"}